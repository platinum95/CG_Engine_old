
//== PROGRAM LINK STATUS = TRUE
//== PROGRAM VALIDATE STATUS = TRUE
/*== INFO LOG ==
Validation warning! - Sampler value diffuseTexture has not been set.
Validation successful.
  == INFO LOG END ==*/

//======================================================
//   Vertex Shader 2 
//======================================================

//== SHADER COMPILE STATUS = TRUE
#version 330


layout (std140) uniform CameraProjectionData
{ 
  mat4 ViewMatrix;
  mat4 ProjectionMatrix;
  mat4 PV_Matrix;
  vec4 CameraPosition;
  vec4 CameraOrientation;
};

layout (std140) uniform LightData
{ 
	vec4 LightPosition;
	vec3 LightColour;
	float Brightness;
};

in vec3 vPosition;
in vec3 vNormal;
in vec3 vTangeant;
in vec3 vBitangeant;
in vec2 TexCoord;
out mat3 models;

out VS_OUT {
    vec3 FragPos;
    vec2 TexCoords;
    mat3 TBN;
} vs_out;  

uniform mat4 model;
varying vec3 Pos_ViewSpace;
varying vec4 LightPosition_Viewspace;

void main(){
	models = mat3(transpose(inverse( ViewMatrix * model)));
	vec3 T = normalize(models * vTangeant);
	vec3 B = normalize(models * vBitangeant);
	vec3 N = normalize(models * vNormal);
	vs_out.TBN = mat3(T, B, N);
	vs_out.TexCoords = TexCoord;
	Pos_ViewSpace = vec3(ViewMatrix * model * vec4(vPosition, 1.0));
	LightPosition_Viewspace = ViewMatrix * LightPosition;
    gl_Position =  PV_Matrix * model * vec4(vPosition, 1.0);
	vs_out.FragPos = gl_Position.xyz;
}
//======================================================
//   Fragment Shader 3 
//======================================================

//== SHADER COMPILE STATUS = TRUE
#version 330                                                                        
out vec4 FragColour;

in mat3 models;
varying vec3 Pos_ViewSpace;
varying vec4 LightPosition_Viewspace;

uniform sampler2D diffuseTexture;
uniform sampler2D normalTexture;

layout (std140) uniform LightData
{ 
	vec4 LightPosition;
	vec3 LightColour;
	float Brightness;
};

in VS_OUT {
    vec3 FragPos;
    vec2 TexCoords;
    mat3 TBN;
} fs_in; 

void main(){
	// ambient
    float ambientStrength = 0.1;
    vec3 ambient = ambientStrength * LightColour; 

	vec3 normal2 = texture(normalTexture, fs_in.TexCoords).rgb;
	normal2 = normalize(normal2 * 2.0 - 1.0);   
	normal2 = normalize(fs_in.TBN * normal2); 

	vec3 norm = normal2;
	vec3 lightDir = vec3(normalize(LightPosition_Viewspace.xyz - Pos_ViewSpace));
	float diff = max(dot(norm, lightDir), 0.0);
	vec3 diffuse = diff * LightColour;

	diffuse = diffuse * Brightness;
	vec3 result = (ambient + diffuse) * texture(diffuseTexture, fs_in.TexCoords).xyz;
	FragColour = vec4(result, 1.0);

}