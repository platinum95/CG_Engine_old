
//== PROGRAM LINK STATUS = TRUE
//== PROGRAM VALIDATE STATUS = FALSE

//======================================================
//   Vertex Shader 11 
//======================================================

//== SHADER COMPILE STATUS = TRUE
#version 330


layout (std140) uniform CameraProjectionData
{ 
  mat4 ViewMatrix;
  mat4 ProjectionMatrix;
  mat4 PV_Matrix;
  vec4 CameraPosition;
  vec4 CameraOrientation;
  vec4 ClippingPlane;
};

layout (std140) uniform LightData
{ 
	vec4 LightPosition;
	vec3 LightColour;
	float Brightness;
};

in vec3 vPosition;
in vec3 vNormal;
in vec2 TexCoord;
out mat3 models;
out vec3 norms;
out vec2 TexCoords;

uniform mat4 model;
varying vec3 Pos_ViewSpace;
varying vec4 LightPosition_Viewspace;

void main(){
	models = mat3(transpose(inverse( ViewMatrix * model)));
	norms = vNormal;
	TexCoords = TexCoord;
	vec4 WorldPosition = model * vec4(vPosition, 1.0);
	gl_ClipDistance[0] = dot(WorldPosition, ClippingPlane);

	Pos_ViewSpace = vec3(ViewMatrix * WorldPosition);
	LightPosition_Viewspace = ViewMatrix * LightPosition;
    gl_Position =  PV_Matrix * WorldPosition;
}
//======================================================
//   Fragment Shader 12 
//======================================================

//== SHADER COMPILE STATUS = TRUE
#version 330                                                                        
out vec4 FragColour;

in mat3 models;
varying vec3 Pos_ViewSpace;
varying vec4 LightPosition_Viewspace;
in vec3 norms;
in vec2 TexCoords;

uniform sampler2D diffuseTexture;

layout (std140) uniform LightData
{ 
	vec4 LightPosition;
	vec3 LightColour;
	float Brightness;
};

void main(){
	// ambient
    float ambientStrength = 0.1;
    vec3 ambient = ambientStrength * LightColour; 

	//Diffuse
	vec3 norm = normalize(norms);   
	norm = normalize(models * norm); 

	vec3 lightDir = vec3(normalize(LightPosition_Viewspace.xyz - Pos_ViewSpace));
	float diff = max(dot(norm, lightDir), 0.0);
	vec3 diffuse = diff * LightColour;
	diffuse = diffuse * Brightness;

	//Specular
	vec3 CamDir = normalize(vec3(0,0,0) - Pos_ViewSpace);
	vec3 ReflectDir = reflect(-lightDir, norm);
	float SpecAmount = pow(max(dot(CamDir, ReflectDir), 0.0), 16);
	vec3 SpecularComponent = 0.99 * SpecAmount * LightColour;  



	//Output
	vec3 result = (ambient + diffuse + SpecularComponent) * texture(diffuseTexture, TexCoords).xyz;
	FragColour = vec4(result, 1.0);

}