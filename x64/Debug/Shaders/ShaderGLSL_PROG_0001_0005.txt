
//== PROGRAM LINK STATUS = TRUE
//== PROGRAM VALIDATE STATUS = TRUE

//======================================================
//   Vertex Shader 2 
//======================================================

//== SHADER COMPILE STATUS = TRUE
#version 330


layout (std140) uniform CameraProjectionData
{ 
  mat4 ViewMatrix;
  mat4 ProjectionMatrix;
  mat4 PV_Matrix;
  vec4 CameraPosition;
  vec4 CameraOrientation;
};

layout (std140) uniform LightData
{ 
	vec4 LightPosition;
	vec3 LightColour;
	float Brightness;
};

in vec3 vPosition;
in vec3 fColor;
uniform mat4 model;
varying vec4 PassColour;
out vec3 Normal;
varying vec3 Pos_ViewSpace;
varying vec4 LightPosition_Viewspace;

void main(){
	Pos_ViewSpace = vec3(ViewMatrix * model * vec4(vPosition, 1.0));
	Normal = mat3(transpose(inverse( ViewMatrix * model))) * fColor;
	PassColour = vec4(fColor, 1.0);
	LightPosition_Viewspace = ViewMatrix * LightPosition;
    gl_Position =  PV_Matrix * model * vec4(vPosition, 1.0);
}
//======================================================
//   Fragment Shader 3 
//======================================================

//== SHADER COMPILE STATUS = TRUE
#version 330                                                                        
out vec4 FragColour;
varying vec4 PassColour;
in vec3 Normal;
varying vec3 Pos_ViewSpace;
varying vec4 LightPosition_Viewspace;

layout (std140) uniform LightData
{ 
	vec4 LightPosition;
	vec3 LightColour;
	float Brightness;
};


void main(){
	// ambient
    float ambientStrength = 0.1;
    vec3 ambient = ambientStrength * LightColour; 

	vec3 norm = normalize(Normal);
	vec3 lightDir = vec3(normalize(LightPosition_Viewspace.xyz - Pos_ViewSpace));
	float diff = max(dot(norm, lightDir), 0.0);
	vec3 diffuse = diff * LightColour;

	diffuse = diffuse * Brightness;
	vec3 result = (ambient + diffuse) * vec3((PassColour+1.0)/2.0);
	FragColour = vec4(result, 1.0);

}